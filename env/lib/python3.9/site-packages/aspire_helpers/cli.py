import json
import os
from unittest import mock

import click

from aspire_helpers.deployment_functions import deploy
from aspire_helpers.service_now import complete_change_request, raise_change_request
from aspire_helpers.sf_connector import call_snowflake


@click.group(context_settings={"help_option_names": ["-h", "--help"]})
def cli():
    """
    Aspire-Helpers: Python based helper functions for Aspire

    Link for more information: https://sainsburys-tech.github.io/aspire-helpers/
    """
    pass  # pragma: no cover


# Service Now
@cli.command(name="open_change_request")
def open_change_request():
    """Open a ServiceNow Change Request"""
    click.echo(raise_change_request())  # pragma: no cover


@cli.command(name="close_change_request")
def close_change_request():
    """Close a ServiceNow Change Request"""
    click.echo(complete_change_request())  # pragma: no cover


# Deployment
@cli.command(name="deploy")
@click.option("--deploy_type", prompt="Enter deployment type")
@click.option("--mode", prompt="Enter mode")
def deploy_object(deploy_type, mode):
    """Deploy an Object"""
    # Assuming your deploy function takes two arguments now
    click.echo(deploy(deploy_type, mode))  # pragma: no cover


@cli.command(name="call_snowflake")
@click.option(
    "--route",
    "-r",
    type=str,
    help="Selects how to route the query, either local or aws. Local will route the query directly through the vpn, and aws will route the query through a lambda function in aws, this is necessary due to reliability problems with the vpn",
)
@click.option(
    "--sql-file",
    "-s",
    type=str,
    help="File path to a sql file of sql you want to be run on snowflake e.g. sql_file_path='tests/test_sql_file_path.sql'. You can only use sql_file_path or sql_queries not both.",
)
@click.option(
    "--sql-query",
    "-q",
    multiple=True,
    type=str,
    help="Specify a list of queries to be run on snowflake. You can only use sql_file_path or sql_queries not both.",
)
@click.option(
    "--replace",
    "-rp",
    type=str,
    default="{}",
    help="Dictionary of any values you want to replace in the provided SQL. E.g. `replace={<<TRANSACTION_ID>>:str(uuid4())}` to replace every instance of <<TRANSACTION_ID>> with a dummy TransactionID when inserting dummy data for testing.",
)
@click.option(
    "--service-user",
    default=False,
    help="Set to default `False`. If set to `True`, the service user account described in the `aspire_helpers_config.yml` will be used to log into snowflake instead of the engineers personal account. `service_user=True` must be set when using the `aws` route for now as the service user is used by the aws lambda.",
)
@click.option(
    "--suppress-success",
    default=True,
    help="If true it will not return results from queries that do not return data, in order to avoid cluttered output.",
)
def cli_call_snowflake(
    route, sql_file, sql_query, replace, service_user, suppress_success
):

    """Call a snowflake query"""
    result = call_snowflake(
        route=route,
        sql_file_path=sql_file,
        sql_queries=sql_query,
        replace=json.loads(replace),
        service_user=service_user,
        suppress_success_statements=suppress_success,
    )

    return result
