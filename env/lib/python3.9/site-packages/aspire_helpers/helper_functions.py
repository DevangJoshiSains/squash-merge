import copy
import logging
import os
import re
import sys
from typing import Tuple

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from aspire_helpers.constants import EnvVars, get_common_var, get_role_name, get_whs


def build_lambda_payload(
    query_file_path: str = None,
    query_list=None,
    query: str = None,
    config: dict = None,
):
    """
    Build the lambda payload run via the Snowflake Connector within the AWS lambda.
    Add ROLE, DATABASE and WAREHOUSE to the provided SQL statements listed in query.
    """
    default_config = {}
    database = get_common_var(EnvVars.DATABASE)

    if query_file_path:
        query_contents = read_sql(query_file_path)
        default_config = {
            "sql": [
                f"USE ROLE {get_role_name(config)};",
                f"USE DATABASE ADW_{database};",
                f"USE WAREHOUSE {get_whs(config)};",
            ],
            "deploy": True,
        }
        default_config["sql"].extend(query_contents)

    if query_list:
        default_config = {
            "sql": [
                f"USE ROLE {get_role_name(config)};",
                f"USE DATABASE ADW_{database};",
                f"USE WAREHOUSE {get_whs(config)};",
            ],
            "deploy": True,
        }
        default_config["sql"].extend(query_list)

    if query:
        default_config = {
            "sql": [
                f"USE ROLE {get_role_name(config)};",
                f"USE DATABASE ADW_{database};",
                f"USE WAREHOUSE {get_whs(config)};",
            ],
            "deploy": True,
        }
        default_config["sql"].append(query)

    return default_config


def build_snowflake_query(
    query: list = None,
    creds: dict = None,
):
    """
    Build the Snowflake query thats run via the Snowflake Connector.
    Add ROLE, DATABASE and WAREHOUSE to the provided SQL statements listed in query.
    """
    database = get_common_var(EnvVars.DATABASE)
    default_config = [
        f"USE ROLE {get_role_name(creds)};",
        f"USE DATABASE ADW_{database};",
        f"USE WAREHOUSE {get_whs(creds)};",
    ]

    default_config.extend(query)
    logging.info(f"Statments to be run in Snowflake: {default_config}")

    return default_config


def read_file(file_path: str) -> str:
    """
    Given a file path, open and return text as string
    :param file_path:
    :return:
    """
    try:
        with open(file_path, "r") as sql_file:
            return sql_file.read()

    except EnvironmentError as e:
        logging.exception(f"Error opening {file_path}")
        raise e


def write_file(content: str, path: str) -> None:
    """
    Write a string to a file
    :param content
    :param file_path:
    :return: None
    """
    with open(path, "w") as f:
        f.write(content)


def read_sql(query_file_path: str = None) -> list[str]:
    """
    Reads file at query_file_path and returns a list of sql statements from within
    :param query_file_path: file to be read
    :return output: List[str] : List of sql statements
    """

    if not query_file_path:
        return []

    raw_sql = read_file(query_file_path)
    sql = re.split("\n+", raw_sql)

    return [statement for statement in sql if statement != ""]
