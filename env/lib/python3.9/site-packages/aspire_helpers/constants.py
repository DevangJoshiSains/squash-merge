import logging
import os
from enum import Enum
from functools import cache

import yaml


class EnvVars(Enum):
    DATABASE: str = "database"
    TEAM: str = "team"
    SF_USER: str = "sf_user"
    MIGRATIONS_DIR: str = "MIGRATIONS_DIR"
    ROLLBACKS_DIR: str = "ROLLBACKS_DIR"
    DDL_DIR: str = "DDL_DIR"


# Logging Format
LOGGING_FORMAT = "%(filename)s:%(lineno)d %(levelname)s ->> %(message)s"

logging.basicConfig(format=LOGGING_FORMAT)
logging.getLogger().setLevel(logging.INFO)

aspire_helpers_docs_link = "https://sainsburys-tech.github.io/aspire-helpers/"

GIT_DIFF_ON_BRANCHES = "git diff --diff-filter=d origin/main --name-only {directory}"
GIT_DIFF_ON_SQUASH = "git diff --diff-filter=d HEAD~1..HEAD --name-only {directory}"
GIT_SHOW_COMMAND = "git show origin/main:{path} > {target_dir}"

PII_TYPES = ["PII_COLLEAGUE", "COMMERCIALLY_SENSITIVE", "PII_CUSTOMER"]

CONFIG_PATH = "aspire_helpers_config.yml"
# Extract paths from the dir_config yaml file
@cache
def read_yaml(path: str) -> str:
    with open(path, "r") as f:
        yaml_file = yaml.safe_load(f)
    return yaml_file


def get_env_var(var: Enum) -> str:
    return os.getenv(var.value)


def get_var_from_yaml(var_name: Enum) -> str:
    config = read_yaml(CONFIG_PATH)
    if var_name.value in config:
        return config[var_name.value]
    else:
        return None


def get_common_var(var_name: Enum) -> str:
    value = None
    if var_name.value in os.environ:
        value = get_env_var(var_name)
    else:
        value = get_var_from_yaml(var_name)

    if value is None:
        error_message = f"""variable '{var_name.value}' not found in either environnement variables or aspire_helpers_config.yaml, please see the aspire-helpers docs for more info. {aspire_helpers_docs_link}user_guides/USING"""
        raise KeyError(error_message)

    return value


def generate_role_name(database: str, team: str, etl_run=False) -> str:
    team = team.upper()

    if f"{team}_ENV" in database:
        role = f"RL_DEV_{team}_MANAGE_TEST_DB"
    elif etl_run:
        role = f"RL_{database}_{team}_ENGINEER"
    else:
        role = f"RL_{database}_OBJECT_OWNER"

    return f"USE ROLE {role};"


def get_role_name(creds):
    role = creds["ETL_ROLE"]
    return role


def get_whs(creds):
    whs = creds["WHS"]
    return whs
