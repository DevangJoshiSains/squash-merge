import json
import logging
import os
import subprocess
import sys
from http import HTTPStatus
from json.decoder import JSONDecodeError
from urllib.error import HTTPError

import requests

# Retrieve the logger instance
log = logging.getLogger(__name__)

GITHUB_ACTIONS_FAILURE_STRING = "failure"
GITHUB_ACTIONS_SUCCESS_STRING = "success"
GITHUB_ACTIONS_CUSTOM_BACKOUT_STRING = "backout"
SERVICE_NOW_FAILURE_STRING = "fail"
SERVICE_NOW_SUCCESS_STRING = "succeed"
SERVICE_NOW_BACKOUT_STRING = "backout"

# Default Prod ServiceNow ChangeAPI instance
# - this can be overridden by setting CHANGE_ENDPOINT_URL as an environment variable
CHANGE_ENDPOINT_URL = os.getenv(
    "CHANGE_ENDPOINT_URL", "https://change.eng.js-devops.co.uk/sops/change"
)


def open_change_request(
    deployment_item: str, project: str, environment: str, change_endpoint_url: str
) -> str:
    """
    Calls the `/sops/change` endpoint of ServiceNow API to create a
    new change request and returns the change request id.

    Args:
        deployment_item str:
        project str:
        environment str:
        change_endpoint_url str:
    Returns:
        change_id(str):
    """
    head_commit = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()
    log.info(f"head commit: {head_commit}")
    prev_commit = (
        subprocess.check_output(["git", "rev-parse", "HEAD~1"]).decode().strip()
    )
    log.info(f"prev commit: {prev_commit}")
    changelog = (
        subprocess.check_output(
            [
                "git",
                "log",
                f"{prev_commit}...{head_commit}",
                "--pretty=format:'%h - %s'",
                "--reverse",
            ]
        )
        .decode()
        .strip()
    )
    log.info(f"change log: {changelog}")

    deployment_description = f"{project}-{environment}\n{changelog}"

    try:
        resp = requests.post(
            change_endpoint_url,
            data={
                "deploymentItem": deployment_item,
                "assignmentGroup": os.environ["ASSIGNMENT_GROUP"],
                "description": deployment_description,
            },
            headers={"X-API-KEY": os.environ["SERVICE_NOW_API_KEY"]},
        )
        resp.raise_for_status()
        log.info(f"Response code: {resp}")

        resp_body = resp.json()
        change_id = resp_body["id"]
        log.info(f"Change request ID: {change_id}")
        return change_id

    # Raise a HTTPError - most likely problem with Change API authentication
    except requests.exceptions.HTTPError as e:
        log.exception(f"Error connecting to change endpoint: {str(e)}")
        sys.exit(1)

    # Raise a KeyError - most likely a missing Change_ID from the API
    except KeyError as e:
        log.exception(
            f"Configuration error: {str(e)}, a change request may or may not have been opened."
        )
        sys.exit(1)

    # Raise any other error - most likely an issue on ServiceNow's end
    except Exception as e:
        log.exception(
            f"Something has gone wrong, a change request may or may not have been opened: {str(e)}"
        )
        sys.exit(1)


def close_change_request(change_id: str, status: str, change_endpoint_url: str) -> str:
    """
    Calls the `/sops/change/<change_id>/<status>` endpoint of ServiceNow API
    to close a change request with a status.

    Parameters:
        change_id(str):
        status(str):
        change_endpoint_url(str):
    Returns:
        (str): Either a success message OR json response from the API
    """
    try:
        response = requests.post(
            f"{change_endpoint_url}/{change_id}/{status}",
            headers={"X-API-KEY": os.environ["SERVICE_NOW_API_KEY"]},
        )
        response.raise_for_status()
        if response.status_code == HTTPStatus.NO_CONTENT.value:
            # Unset "change_id" environment variable
            os.environ["change_id"] = ""
            return "ServiceNow change request closed successfully!"
        elif response.status_code == HTTPStatus.OK.value:
            return response.json()

    # Raise a HTTPError - most likely problem with Change API authentication
    except requests.exceptions.HTTPError as e:
        log.exception(f"Error connecting to change endpoint: {str(e)}")
        sys.exit(1)

    # Raise any other error - most likely an issue on ServiceNow's end
    except Exception as e:
        log.exception(
            f"Something has gone wrong, a change request may or may not have been closed: {str(e)}"
        )
        sys.exit(1)


def raise_change_request(change_details: dict = {}) -> str:
    """
    Raises a ServiceNow change request based on the changes made between the HEAD and HEAD~1 branches.

    Parameters:
        change_details(dict): a dictionary of defined variables - optional
    Returns:
        change_id(str): string of change request ID
    """
    # If the user has supplied a dictionary of arguments, use those, otherwise retrieve from environment variables
    if change_details:
        deployment_item = change_details["deployment_item"]
        project = change_details["project"]
        environment = change_details["environment"]
        change_endpoint_url = change_details["CHANGE_ENDPOINT_URL"]
    else:
        deployment_item = os.environ["deployment_item"]
        project = os.environ["project"]
        environment = os.environ["environment"]
        change_endpoint_url = CHANGE_ENDPOINT_URL

    old_change_id = os.environ.get("change_id")
    # If change_id is already set in environment variables, warn that this is be overwritten
    if old_change_id:
        log.info(
            f"Current change_id is: {old_change_id}, this will now be overwritten."
        )

    new_change_id = open_change_request(
        deployment_item, project, environment, change_endpoint_url
    )

    log.info(f"Service now ticket id for this request is : {new_change_id}")
    # N.b. this will not affect the environment variables on the OS level and we are persisting the value in this dictionary for convenience.

    # Set "change_id" in environment variables equal to change request ID so it can be used to close the request later
    if "GITHUB_OUTPUT" in os.environ:
        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            print("{0}={1}".format("change_id", new_change_id), file=f)

    os.environ["change_id"] = new_change_id
    return new_change_id


def complete_change_request() -> str:
    """
    Closes a ServiceNow change request with the run status fail or succeed.

    Returns:
        response(str): Either a success message OR json response from the API
    """

    # Steps to convert the git hub action steps outcome status to the service now function acceptable format.
    if os.environ["run_status"] == GITHUB_ACTIONS_FAILURE_STRING:
        run_status = SERVICE_NOW_FAILURE_STRING
    elif os.environ["run_status"] == GITHUB_ACTIONS_SUCCESS_STRING:
        run_status = SERVICE_NOW_SUCCESS_STRING
    elif os.environ["run_status"] == GITHUB_ACTIONS_CUSTOM_BACKOUT_STRING:
        run_status = SERVICE_NOW_BACKOUT_STRING
    else:
        raise Exception("run_status retrieved incorrectly")
    log.info(f"run status: {run_status}")

    change_id = os.environ.get("change_id")
    log.info(f"change_id: {change_id}")

    change_endpoint_url = CHANGE_ENDPOINT_URL
    log.info(f"change_endpoint_url from env vars: {change_endpoint_url}")

    response = close_change_request(change_id, run_status, change_endpoint_url)
    return response
